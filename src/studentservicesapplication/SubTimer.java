/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package studentservicesapplication;

/**
 *
 * @author x12112267
 * This part of the app allows the user to enter the date and time that their project is due for submission
 * and tells them how long they have left until the deadline. It also provides them with second date, displaying
 * the date by which they must submit their work for proof reading if they wish to avail of that service. 
 * NOTE: I have set the the year to 2013 and seconds to 0 as default. Month, Day, Hour, Min are input by the user.
 * Note: The month must be entered as a number (1 - 12) and not as a word (January, etc)
 * Note: The hour input is based on the 24HR system.
 * Further Developments: I would like to build on this code in order to include an array list that would store
 * the users deadlines and allow them to view them. However it was quite a bit of work getting the code to function
 * correctly, so I will look at including an array list at a later date.
*/

import java.util.Calendar;

public class SubTimer extends javax.swing.JFrame {
 
    private int year;
    private String month;
    private String day;
    private String hour;
    private String min;
    private int sec;
  
    public SubTimer() {
        initComponents();
        //Setting all the time values to zero as default with the exception of year 
        // Month, day, hour and min will be read in and and assigned later
        year = 2013;
        month = new String();
        day = new String();
        hour = new String();
        min = new String();
        sec = 0;
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        headerLB = new javax.swing.JLabel();
        prompt1LB = new javax.swing.JLabel();
        monthLB = new javax.swing.JLabel();
        dayLb = new javax.swing.JLabel();
        hourLB = new javax.swing.JLabel();
        minLB = new javax.swing.JLabel();
        monthTF = new javax.swing.JTextField();
        dayTF = new javax.swing.JTextField();
        hourTF = new javax.swing.JTextField();
        minTF = new javax.swing.JTextField();
        prompt2LB = new javax.swing.JLabel();
        time1LB = new javax.swing.JLabel();
        prompt3LB = new javax.swing.JLabel();
        time2LB = new javax.swing.JLabel();
        homeBTN = new javax.swing.JButton();
        backBTN = new javax.swing.JButton();
        naviBarLB = new javax.swing.JLabel();
        calBTN = new javax.swing.JButton();
        wrapperLB = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        headerLB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        headerLB.setForeground(new java.awt.Color(255, 255, 255));
        headerLB.setText("Submission Deadline Timer");
        headerLB.setBounds(80, 20, 250, 22);
        jLayeredPane1.add(headerLB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        prompt1LB.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        prompt1LB.setForeground(new java.awt.Color(255, 255, 255));
        prompt1LB.setText("Please enter the date and time of your submission dadline: ");
        prompt1LB.setBounds(20, 70, 330, 15);
        jLayeredPane1.add(prompt1LB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        monthLB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        monthLB.setForeground(new java.awt.Color(255, 255, 255));
        monthLB.setText("Month");
        monthLB.setBounds(40, 100, 45, 17);
        jLayeredPane1.add(monthLB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dayLb.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        dayLb.setForeground(new java.awt.Color(255, 255, 255));
        dayLb.setText("Day");
        dayLb.setBounds(140, 100, 25, 17);
        jLayeredPane1.add(dayLb, javax.swing.JLayeredPane.DEFAULT_LAYER);

        hourLB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        hourLB.setForeground(new java.awt.Color(255, 255, 255));
        hourLB.setText("Hour");
        hourLB.setBounds(230, 100, 34, 17);
        jLayeredPane1.add(hourLB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        minLB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        minLB.setForeground(new java.awt.Color(255, 255, 255));
        minLB.setText("Minute");
        minLB.setBounds(310, 100, 50, 17);
        jLayeredPane1.add(minLB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        monthTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        monthTF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        monthTF.setBounds(40, 120, 50, 30);
        jLayeredPane1.add(monthTF, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dayTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        dayTF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        dayTF.setBounds(130, 120, 50, 30);
        jLayeredPane1.add(dayTF, javax.swing.JLayeredPane.DEFAULT_LAYER);

        hourTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        hourTF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        hourTF.setBounds(220, 120, 50, 30);
        jLayeredPane1.add(hourTF, javax.swing.JLayeredPane.DEFAULT_LAYER);

        minTF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        minTF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        minTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minTFActionPerformed(evt);
            }
        });
        minTF.setBounds(310, 120, 50, 30);
        jLayeredPane1.add(minTF, javax.swing.JLayeredPane.DEFAULT_LAYER);

        prompt2LB.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        prompt2LB.setForeground(new java.awt.Color(255, 255, 255));
        prompt2LB.setText("Time remaining until submission is due: ");
        prompt2LB.setBounds(20, 210, 270, 15);
        jLayeredPane1.add(prompt2LB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        time1LB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        time1LB.setForeground(new java.awt.Color(255, 255, 255));
        time1LB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        time1LB.setBounds(20, 240, 350, 50);
        jLayeredPane1.add(time1LB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        prompt3LB.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        prompt3LB.setForeground(new java.awt.Color(255, 255, 255));
        prompt3LB.setText("If you wish to avail of proof reading services, submit by: ");
        prompt3LB.setBounds(20, 310, 340, 15);
        jLayeredPane1.add(prompt3LB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        time2LB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        time2LB.setForeground(new java.awt.Color(255, 255, 255));
        time2LB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        time2LB.setBounds(20, 340, 350, 50);
        jLayeredPane1.add(time2LB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        homeBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/studentservicesapplication/HomeButtonLbl.fw.png"))); // NOI18N
        homeBTN.setBorder(null);
        homeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBTNActionPerformed(evt);
            }
        });
        homeBTN.setBounds(170, 430, 50, 50);
        jLayeredPane1.add(homeBTN, javax.swing.JLayeredPane.DEFAULT_LAYER);

        backBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/studentservicesapplication/backButton1.jpg"))); // NOI18N
        backBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBTNActionPerformed(evt);
            }
        });
        backBTN.setBounds(10, 10, 30, 30);
        jLayeredPane1.add(backBTN, javax.swing.JLayeredPane.DEFAULT_LAYER);

        naviBarLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/studentservicesapplication/navigationBar.jpg"))); // NOI18N
        naviBarLB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        naviBarLB.setBounds(0, 410, 400, 90);
        jLayeredPane1.add(naviBarLB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        calBTN.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        calBTN.setText("Calculate");
        calBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        calBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calBTNActionPerformed(evt);
            }
        });
        calBTN.setBounds(140, 170, 110, 30);
        jLayeredPane1.add(calBTN, javax.swing.JLayeredPane.DEFAULT_LAYER);

        wrapperLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/studentservicesapplication/App background.jpg"))); // NOI18N
        wrapperLB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        wrapperLB.setBounds(0, 0, 400, 500);
        jLayeredPane1.add(wrapperLB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBTNActionPerformed
        MainPage myMainPage = new MainPage();
        myMainPage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_homeBTNActionPerformed

    private void minTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minTFActionPerformed
      
    }//GEN-LAST:event_minTFActionPerformed

    private void calBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calBTNActionPerformed
       //Here I am reading in the values for month,day,hour and min
        month = monthTF.getText();
        day = dayTF.getText();
        hour = hourTF.getText();
        min = minTF.getText();
        
        //To convert the strings to integers so that the values could be calculated later, I created new variables for each
        int monthInt = Integer.parseInt(month)-1;
        int dayInt = Integer.parseInt(day);
        int hourInt = Integer.parseInt(hour);
        int minInt = Integer.parseInt(min);
        
        //Creating a new Calendar object containing the end date for the submission
        Calendar endDateCal = Calendar.getInstance();
        
        endDateCal.set(year, monthInt, dayInt, hourInt, minInt);
        
        //Testing for correct output
        //System.out.println(endDateCal);
        
        //Here I am getting the time in millseconds from the current system time and 01/01/1970
        //Using the long number data type
        long endDateLong = endDateCal.getTimeInMillis();
        
        //creating a new date object with the current system date
        Calendar nowCal = Calendar.getInstance();
        //Testing for correct output
        //System.out.println(nowCal);
        
        
        //Getting time in Milliseconds between tis date and 01/01/1970
        long nowLong = nowCal.getTimeInMillis();
        
        // Difference between the two dates in milliseconds
        long diff = endDateLong - nowLong;
        //Testing for correct output
        //System.out.println("diff = " + diff);
        
        diff = diff/1000;
        
        // Note the following code is mostly based on the "Farmer John" app completed in week 5 of semester 1
        
        
        // Seconds in the day - Google
        int secInDay = 86400;
        int daysUntilSubmission = (int) diff/secInDay;
        diff = diff % secInDay;
        //System.out.println("daysUnt = " + daysUntilSubmission);
        long d = 269868/8640;
        //System.out.println("should be" + d);
        
        int millisecInHour = secInDay / 24;
        int hoursUntilSubmission = (int)diff/millisecInHour;
        diff = diff % millisecInHour;
        
        int millisecInMin = millisecInHour / 60;
        int minUntilSubmission = (int)diff/millisecInMin;
        diff = diff % millisecInMin;
        
        int millisecInSec = 1000;
        int secUntilSubmission = (int)diff/millisecInSec;
        
        //System.out.println(daysUntilSubmission + " days");
        //System.out.println(hoursUntilSubmission + " hours");
        //System.out.println(minUntilSubmission + " mins");
        //System.out.println(secUntilSubmission + " secs");
        
        //Display the submit by Date:
        Calendar submitByDate=endDateCal;
        submitByDate.add(Calendar.DATE, -5);
       /* System.out.println("Please submit by "
                + submitByDate.get(Calendar.DATE) + "/"
                + (submitByDate.get(Calendar.MONTH)+1) + "/"
                + submitByDate.get(Calendar.YEAR));
        */
        
        //Assign the correct details to the labels
        time1LB.setText("      "  
                + daysUntilSubmission + " Days" + " "  
                + hoursUntilSubmission + " Hours" + " "  
                + minUntilSubmission + " Mins" + " " 
                + secUntilSubmission + " Secs");
        
        time2LB.setText("                           " 
                + submitByDate.get(Calendar.DATE) + "/"
                + (submitByDate.get(Calendar.MONTH)+1) + "/"
                + submitByDate.get(Calendar.YEAR));
        
        
    }//GEN-LAST:event_calBTNActionPerformed

    private void backBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBTNActionPerformed
        LearnSupPage back = new LearnSupPage();
        back.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SubTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SubTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SubTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new SubTimer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBTN;
    private javax.swing.JButton calBTN;
    private javax.swing.JLabel dayLb;
    private javax.swing.JTextField dayTF;
    private javax.swing.JLabel headerLB;
    private javax.swing.JButton homeBTN;
    private javax.swing.JLabel hourLB;
    private javax.swing.JTextField hourTF;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel minLB;
    private javax.swing.JTextField minTF;
    private javax.swing.JLabel monthLB;
    private javax.swing.JTextField monthTF;
    private javax.swing.JLabel naviBarLB;
    private javax.swing.JLabel prompt1LB;
    private javax.swing.JLabel prompt2LB;
    private javax.swing.JLabel prompt3LB;
    private javax.swing.JLabel time1LB;
    private javax.swing.JLabel time2LB;
    private javax.swing.JLabel wrapperLB;
    // End of variables declaration//GEN-END:variables
}
